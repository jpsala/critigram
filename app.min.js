(function() {
    var calc, graph, last_data, last_width, re;
    google.load("visualization", "1", {packages: ["corechart"]});
    re = RegExp(/^\d+/gm);
    last_data = null;
    last_width = null;
    calc = function() {
        var data, ratings, ratings_raw;
        data = document.getElementById("data").value;
        if (data === last_data && last_width === window.innerWidth) {
            return
        }
        last_data = data;
        last_width = window.innerWidth;
        ratings_raw = data.match(re);
        if (ratings_raw != null) {
            ratings = _.map(ratings_raw, function(v) {
                return parseInt(v)
            })
        } else {
            ratings = []
        }
        return graph(ratings)
    };
    graph = function(rankings) {
        var chart, data, labels, merge, options, values, x;
        labels = function() {
            var _i, _results;
            _results = [];
            for (x = _i = 10; _i <= 100; x = _i += 10) {
                _results.push("" + (x - (x > 10 ? 9 : 10)) + "-" + x)
            }
            return _results
        }();
        values = Array.apply(null, new Array(10)).map(Number.prototype.valueOf, 0);
        _.each(rankings, function(v) {
            var b;
            b = v > 0 ? Math.floor((v - 1) / 1) : 0;
            return values[b] += 1
        });
        merge = _.zip(labels, values);
        merge.unshift(["Ranking", "Count"]);
        data = google.visualization.arrayToDataTable(merge);
        options = {hAxis: {title: "Rating range"}, vAxis: {title: "Number of ratings"}, legend: {position: "none"}};
        chart = new google.visualization.ColumnChart(document.getElementById("graph"));
        return chart.draw(data, options)
    };
    setInterval(calc, 1e3)
}).call(this);
